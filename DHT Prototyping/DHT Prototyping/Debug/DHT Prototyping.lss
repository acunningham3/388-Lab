
DHT Prototyping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000072c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000072c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106f  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8a  00000000  00000000  0000188b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000067a  00000000  00000000  00002415  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00002a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063b  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088b  00000000  00000000  0000322b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00003ab6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a1 30       	cpi	r26, 0x01	; 1
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 df 01 	call	0x3be	; 0x3be <main>
  d4:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <DHT_Setup>:

//Get sensor status.
enum DHT_Status_t DHT_status(void)
{
	return (__DHT_STATUS);
}
  dc:	2f e7       	ldi	r18, 0x7F	; 127
  de:	8a e1       	ldi	r24, 0x1A	; 26
  e0:	96 e0       	ldi	r25, 0x06	; 6
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <DHT_Setup+0x6>
  ea:	00 c0       	rjmp	.+0      	; 0xec <DHT_Setup+0x10>
  ec:	00 00       	nop
  ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  f2:	08 95       	ret

000000f4 <DHT_ReadRaw>:

void DHT_ReadRaw(uint8_t Data[4])
{
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <DHT_ReadRaw+0xe>
 102:	00 d0       	rcall	.+0      	; 0x104 <DHT_ReadRaw+0x10>
 104:	1f 92       	push	r1
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
 10a:	68 2f       	mov	r22, r24
 10c:	79 2f       	mov	r23, r25
	uint8_t buffer[5] = {0, 0, 0, 0, 0};
 10e:	fe 01       	movw	r30, r28
 110:	31 96       	adiw	r30, 0x01	; 1
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	df 01       	movw	r26, r30
 116:	1d 92       	st	X+, r1
 118:	8a 95       	dec	r24
 11a:	e9 f7       	brne	.-6      	; 0x116 <DHT_ReadRaw+0x22>
	uint8_t retries, i;
	int8_t j;
	__DHT_STATUS = DHT_Ok;
 11c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>

	//----- Step 1 - Start communication -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Request data
		DigitalWrite(DHT_Pin, Low);			//DHT_PIN = 0
 120:	73 98       	cbi	0x0e, 3	; 14
		PinMode(DHT_Pin, Output);			//DHT_PIN = Output
 122:	6b 9a       	sbi	0x0d, 3	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	87 e8       	ldi	r24, 0x87	; 135
 126:	93 e1       	ldi	r25, 0x13	; 19
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <DHT_ReadRaw+0x34>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <DHT_ReadRaw+0x3a>
 12e:	00 00       	nop
		_delay_ms(__DHT_Delay_Read);
		
		//Setup DHT_PIN as input with pull-up resistor so as to read data
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
 130:	73 9a       	sbi	0x0e, 3	; 14
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input
 132:	6b 98       	cbi	0x0d, 3	; 13

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
 134:	2f e1       	ldi	r18, 0x1F	; 31
 136:	07 c0       	rjmp	.+14     	; 0x146 <DHT_ReadRaw+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	00 c0       	rjmp	.+0      	; 0x13a <DHT_ReadRaw+0x46>
 13a:	21 50       	subi	r18, 0x01	; 1
		{
			_delay_us(2);
			retries += 2;
			if (retries > 60)
 13c:	21 f4       	brne	.+8      	; 0x146 <DHT_ReadRaw+0x52>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 13e:	84 e0       	ldi	r24, 0x04	; 4
 140:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 144:	83 c0       	rjmp	.+262    	; 0x24c <DHT_ReadRaw+0x158>
		DigitalWrite(DHT_Pin, High);		//DHT_PIN = 1 (Pull-up resistor)
		PinMode(DHT_Pin, Input);			//DHT_PIN = Input

		//Wait for response for 20-40us
		retries = 0;
		while (DigitalRead(DHT_Pin))
 146:	63 99       	sbic	0x0c, 3	; 12
 148:	f7 cf       	rjmp	.-18     	; 0x138 <DHT_ReadRaw+0x44>
		}
	}
	//----------------------------------------

	//----- Step 2 - Wait for response -----
	if (__DHT_STATUS == DHT_Ok)
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 14e:	88 23       	and	r24, r24
 150:	41 f0       	breq	.+16     	; 0x162 <DHT_ReadRaw+0x6e>
 152:	7c c0       	rjmp	.+248    	; 0x24c <DHT_ReadRaw+0x158>
 154:	00 c0       	rjmp	.+0      	; 0x156 <DHT_ReadRaw+0x62>
 156:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while (!DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
 158:	29 f4       	brne	.+10     	; 0x164 <DHT_ReadRaw+0x70>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 15a:	84 e0       	ldi	r24, 0x04	; 4
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
 160:	0b c0       	rjmp	.+22     	; 0x178 <DHT_ReadRaw+0x84>
 162:	23 e3       	ldi	r18, 0x33	; 51
	if (__DHT_STATUS == DHT_Ok)
	{
		//Response sequence began
		//Wait for the first response to finish (low for ~80us)
		retries = 0;
		while (!DigitalRead(DHT_Pin))
 164:	63 9b       	sbis	0x0c, 3	; 12
 166:	f6 cf       	rjmp	.-20     	; 0x154 <DHT_ReadRaw+0x60>
 168:	07 c0       	rjmp	.+14     	; 0x178 <DHT_ReadRaw+0x84>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <DHT_ReadRaw+0x78>
 16c:	21 50       	subi	r18, 0x01	; 1
		retries = 0;
		while(DigitalRead(DHT_Pin))
		{
			_delay_us(2);
			retries += 2;
			if (retries > 100)
 16e:	29 f4       	brne	.+10     	; 0x17a <DHT_ReadRaw+0x86>
			{
				__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				break;
 176:	6a c0       	rjmp	.+212    	; 0x24c <DHT_ReadRaw+0x158>
 178:	23 e3       	ldi	r18, 0x33	; 51
				break;
			}
		}
		//Wait for the last response to finish (high for ~80us)
		retries = 0;
		while(DigitalRead(DHT_Pin))
 17a:	63 99       	sbic	0x0c, 3	; 12
 17c:	f6 cf       	rjmp	.-20     	; 0x16a <DHT_ReadRaw+0x76>
		}
	}
	//--------------------------------------

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 182:	88 23       	and	r24, r24
 184:	09 f4       	brne	.+2      	; 0x188 <DHT_ReadRaw+0x94>
 186:	3d c0       	rjmp	.+122    	; 0x202 <DHT_ReadRaw+0x10e>
 188:	61 c0       	rjmp	.+194    	; 0x24c <DHT_ReadRaw+0x158>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <DHT_ReadRaw+0x98>
 18c:	21 50       	subi	r18, 0x01	; 1
			retries = 0;
			while(!DigitalRead(DHT_Pin))
			{
				_delay_us(2);
				retries += 2;
				if (retries > 70)
 18e:	31 f4       	brne	.+12     	; 0x19c <DHT_ReadRaw+0xa8>
				{
					__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 190:	50 93 00 01 	sts	0x0100, r21	; 0x800100 <_edata>
					j = -1;								//Break inner for-loop
					i = 5;								//Break outer for-loop
 194:	45 e0       	ldi	r20, 0x05	; 5
 196:	31 c0       	rjmp	.+98     	; 0x1fa <DHT_ReadRaw+0x106>
 198:	42 2f       	mov	r20, r18
 19a:	24 e2       	ldi	r18, 0x24	; 36
		for (i = 0 ; i < 5 ; i++)
		for (j = 7 ; j >= 0 ; j--)
		{
			//There is always a leading low level of 50 us
			retries = 0;
			while(!DigitalRead(DHT_Pin))
 19c:	63 9b       	sbis	0x0c, 3	; 12
 19e:	f5 cf       	rjmp	.-22     	; 0x18a <DHT_ReadRaw+0x96>
					i = 5;								//Break outer for-loop
					break;								//Break while loop
				}
			}

			if (__DHT_STATUS == DHT_Ok)
 1a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1a4:	21 11       	cpse	r18, r1
 1a6:	26 c0       	rjmp	.+76     	; 0x1f4 <DHT_ReadRaw+0x100>
 1a8:	9b e0       	ldi	r25, 0x0B	; 11
 1aa:	9a 95       	dec	r25
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <DHT_ReadRaw+0xb6>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <DHT_ReadRaw+0xbc>
			{
				//We read data bit || 26-28us means '0' || 70us means '1'
				_delay_us(35);							//Wait for more than 28us
				if (DigitalRead(DHT_Pin))				//If HIGH
 1b0:	63 9b       	sbis	0x0c, 3	; 12
 1b2:	1b c0       	rjmp	.+54     	; 0x1ea <DHT_ReadRaw+0xf6>
				BitSet(buffer[i], j);				//bit = '1'
 1b4:	e1 e0       	ldi	r30, 0x01	; 1
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ec 0f       	add	r30, r28
 1ba:	fd 1f       	adc	r31, r29
 1bc:	e4 0f       	add	r30, r20
 1be:	f1 1d       	adc	r31, r1
 1c0:	20 81       	ld	r18, Z
 1c2:	d7 01       	movw	r26, r14
 1c4:	c6 01       	movw	r24, r12
 1c6:	03 2e       	mov	r0, r19
 1c8:	04 c0       	rjmp	.+8      	; 0x1d2 <DHT_ReadRaw+0xde>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	aa 1f       	adc	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	0a 94       	dec	r0
 1d4:	d2 f7       	brpl	.-12     	; 0x1ca <DHT_ReadRaw+0xd6>
 1d6:	82 2b       	or	r24, r18
 1d8:	80 83       	st	Z, r24
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <DHT_ReadRaw+0xf6>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <DHT_ReadRaw+0xea>
 1de:	21 50       	subi	r18, 0x01	; 1
				retries = 0;
				while(DigitalRead(DHT_Pin))
				{
					_delay_us(2);
					retries += 2;
					if (retries > 100)
 1e0:	29 f4       	brne	.+10     	; 0x1ec <DHT_ReadRaw+0xf8>
					{
						__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 1e2:	50 93 00 01 	sts	0x0100, r21	; 0x800100 <_edata>
						break;
 1e6:	24 2f       	mov	r18, r20
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <DHT_ReadRaw+0x102>
 1ea:	23 e3       	ldi	r18, 0x33	; 51
				_delay_us(35);							//Wait for more than 28us
				if (DigitalRead(DHT_Pin))				//If HIGH
				BitSet(buffer[i], j);				//bit = '1'

				retries = 0;
				while(DigitalRead(DHT_Pin))
 1ec:	63 99       	sbic	0x0c, 3	; 12
 1ee:	f6 cf       	rjmp	.-20     	; 0x1dc <DHT_ReadRaw+0xe8>
 1f0:	24 2f       	mov	r18, r20
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <DHT_ReadRaw+0x102>
 1f4:	24 2f       	mov	r18, r20
	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
		for (j = 7 ; j >= 0 ; j--)
 1f6:	31 50       	subi	r19, 0x01	; 1
 1f8:	7a f6       	brpl	.-98     	; 0x198 <DHT_ReadRaw+0xa4>

	//----- Step 3 - Data transmission -----
	if (__DHT_STATUS == DHT_Ok)
	{
		//Reading 5 bytes, bit by bit
		for (i = 0 ; i < 5 ; i++)
 1fa:	4f 5f       	subi	r20, 0xFF	; 255
 1fc:	45 30       	cpi	r20, 0x05	; 5
 1fe:	38 f0       	brcs	.+14     	; 0x20e <DHT_ReadRaw+0x11a>
 200:	08 c0       	rjmp	.+16     	; 0x212 <DHT_ReadRaw+0x11e>
 202:	40 e0       	ldi	r20, 0x00	; 0
			if (__DHT_STATUS == DHT_Ok)
			{
				//We read data bit || 26-28us means '0' || 70us means '1'
				_delay_us(35);							//Wait for more than 28us
				if (DigitalRead(DHT_Pin))				//If HIGH
				BitSet(buffer[i], j);				//bit = '1'
 204:	c1 2c       	mov	r12, r1
 206:	d1 2c       	mov	r13, r1
 208:	76 01       	movw	r14, r12
 20a:	c3 94       	inc	r12
				{
					_delay_us(2);
					retries += 2;
					if (retries > 100)
					{
						__DHT_STATUS = DHT_Error_Timeout;	//Timeout error
 20c:	54 e0       	ldi	r21, 0x04	; 4
 20e:	37 e0       	ldi	r19, 0x07	; 7
 210:	c4 cf       	rjmp	.-120    	; 0x19a <DHT_ReadRaw+0xa6>
	}
	//--------------------------------------


	//----- Step 4 - Check checksum and return data -----
	if (__DHT_STATUS == DHT_Ok)
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 216:	81 11       	cpse	r24, r1
 218:	19 c0       	rjmp	.+50     	; 0x24c <DHT_ReadRaw+0x158>
	{
		if (((uint8_t)(buffer[0] + buffer[1] + buffer[2] + buffer[3])) != buffer[4])
 21a:	99 81       	ldd	r25, Y+1	; 0x01
 21c:	8a 81       	ldd	r24, Y+2	; 0x02
 21e:	98 0f       	add	r25, r24
 220:	8b 81       	ldd	r24, Y+3	; 0x03
 222:	98 0f       	add	r25, r24
 224:	8c 81       	ldd	r24, Y+4	; 0x04
 226:	89 0f       	add	r24, r25
 228:	9d 81       	ldd	r25, Y+5	; 0x05
 22a:	89 17       	cp	r24, r25
 22c:	21 f0       	breq	.+8      	; 0x236 <DHT_ReadRaw+0x142>
		{
			__DHT_STATUS = DHT_Error_Checksum;	//Checksum error
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 234:	0b c0       	rjmp	.+22     	; 0x24c <DHT_ReadRaw+0x158>
 236:	de 01       	movw	r26, r28
 238:	11 96       	adiw	r26, 0x01	; 1
 23a:	e6 2f       	mov	r30, r22
 23c:	f7 2f       	mov	r31, r23
 23e:	ce 01       	movw	r24, r28
 240:	05 96       	adiw	r24, 0x05	; 5
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
			Data[i] = buffer[i];
 242:	2d 91       	ld	r18, X+
 244:	21 93       	st	Z+, r18
			//data[0] = Humidity		(int)
			//data[1] = Humidity		(dec)
			//data[2] = Temperature		(int)
			//data[3] = Temperature		(dec)
			//data[4] = Checksum
			for (i = 0 ; i < 4 ; i++)
 246:	a8 17       	cp	r26, r24
 248:	b9 07       	cpc	r27, r25
 24a:	d9 f7       	brne	.-10     	; 0x242 <DHT_ReadRaw+0x14e>
			Data[i] = buffer[i];
		}
	}
	//---------------------------------------------------
}
 24c:	0f 90       	pop	r0
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	df 90       	pop	r13
 260:	cf 90       	pop	r12
 262:	08 95       	ret

00000264 <DHT_Read>:
	DHT_Read(waste, Humidity);
}

//Read temperature and humidity.
void DHT_Read(double *Temperature, double *Humidity)
{
 264:	8f 92       	push	r8
 266:	9f 92       	push	r9
 268:	af 92       	push	r10
 26a:	bf 92       	push	r11
 26c:	cf 92       	push	r12
 26e:	df 92       	push	r13
 270:	ef 92       	push	r14
 272:	ff 92       	push	r15
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	00 d0       	rcall	.+0      	; 0x27e <DHT_Read+0x1a>
 27e:	00 d0       	rcall	.+0      	; 0x280 <DHT_Read+0x1c>
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	8c 01       	movw	r16, r24
 286:	7b 01       	movw	r14, r22
	uint8_t data[4] = {0, 0, 0, 0};
 288:	19 82       	std	Y+1, r1	; 0x01
 28a:	1a 82       	std	Y+2, r1	; 0x02
 28c:	1b 82       	std	Y+3, r1	; 0x03
 28e:	1c 82       	std	Y+4, r1	; 0x04

	//Read data
	DHT_ReadRaw(data);
 290:	ce 01       	movw	r24, r28
 292:	01 96       	adiw	r24, 0x01	; 1
 294:	0e 94 7a 00 	call	0xf4	; 0xf4 <DHT_ReadRaw>
	
	//If read successfully
	if (__DHT_STATUS == DHT_Ok)
 298:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 29c:	81 11       	cpse	r24, r1
 29e:	73 c0       	rjmp	.+230    	; 0x386 <DHT_Read+0x122>
	{
		//Calculate values
		*Temperature = DataToTemp(data[2], data[3]);
 2a0:	6c 81       	ldd	r22, Y+4	; 0x04
 2a2:	8b 81       	ldd	r24, Y+3	; 0x03
	
	#if (DHT_Type == DHT11)
	temp = Data2;
	#elif (DHT_Type == DHT22)
	//(Integral<<8 + Decimal) / 10
	temp = (BitCheck(Data2, 7) ? ((((Data2 & 0x7F) << 8) | Data3) / (-10.0)) : (((Data2 << 8) | Data3) / 10.0));
 2a4:	88 23       	and	r24, r24
 2a6:	84 f4       	brge	.+32     	; 0x2c8 <DHT_Read+0x64>
 2a8:	8f 77       	andi	r24, 0x7F	; 127
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	78 2b       	or	r23, r24
 2ae:	07 2e       	mov	r0, r23
 2b0:	00 0c       	add	r0, r0
 2b2:	88 0b       	sbc	r24, r24
 2b4:	99 0b       	sbc	r25, r25
 2b6:	0e 94 a5 02 	call	0x54a	; 0x54a <__floatsisf>
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e2       	ldi	r20, 0x20	; 32
 2c0:	51 ec       	ldi	r21, 0xC1	; 193
 2c2:	0e 94 31 02 	call	0x462	; 0x462 <__divsf3>
 2c6:	0e c0       	rjmp	.+28     	; 0x2e4 <DHT_Read+0x80>
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	78 2b       	or	r23, r24
 2cc:	07 2e       	mov	r0, r23
 2ce:	00 0c       	add	r0, r0
 2d0:	88 0b       	sbc	r24, r24
 2d2:	99 0b       	sbc	r25, r25
 2d4:	0e 94 a5 02 	call	0x54a	; 0x54a <__floatsisf>
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	40 e2       	ldi	r20, 0x20	; 32
 2de:	51 e4       	ldi	r21, 0x41	; 65
 2e0:	0e 94 31 02 	call	0x462	; 0x462 <__divsf3>
	
	//If read successfully
	if (__DHT_STATUS == DHT_Ok)
	{
		//Calculate values
		*Temperature = DataToTemp(data[2], data[3]);
 2e4:	f8 01       	movw	r30, r16
 2e6:	60 83       	st	Z, r22
 2e8:	71 83       	std	Z+1, r23	; 0x01
 2ea:	82 83       	std	Z+2, r24	; 0x02
 2ec:	93 83       	std	Z+3, r25	; 0x03
	
	#if (DHT_Type == DHT11)
	hum = Data0;
	#elif (DHT_Type == DHT22)
	//(Integral<<8 + Decimal) / 10
	hum = ((Data0<<8) | Data1) / 10.0;
 2ee:	69 81       	ldd	r22, Y+1	; 0x01
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	76 2f       	mov	r23, r22
 2f4:	66 27       	eor	r22, r22
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	68 2b       	or	r22, r24
 2fa:	07 2e       	mov	r0, r23
 2fc:	00 0c       	add	r0, r0
 2fe:	88 0b       	sbc	r24, r24
 300:	99 0b       	sbc	r25, r25
 302:	0e 94 a5 02 	call	0x54a	; 0x54a <__floatsisf>
 306:	20 e0       	ldi	r18, 0x00	; 0
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	40 e2       	ldi	r20, 0x20	; 32
 30c:	51 e4       	ldi	r21, 0x41	; 65
 30e:	0e 94 31 02 	call	0x462	; 0x462 <__divsf3>
 312:	4b 01       	movw	r8, r22
 314:	5c 01       	movw	r10, r24
	//If read successfully
	if (__DHT_STATUS == DHT_Ok)
	{
		//Calculate values
		*Temperature = DataToTemp(data[2], data[3]);
		*Humidity = DataToHum(data[0], data[1]);
 316:	f7 01       	movw	r30, r14
 318:	60 83       	st	Z, r22
 31a:	71 83       	std	Z+1, r23	; 0x01
 31c:	82 83       	std	Z+2, r24	; 0x02
 31e:	93 83       	std	Z+3, r25	; 0x03
		
		//Check values
		if ((*Temperature < __DHT_Temperature_Min) || (*Temperature > __DHT_Temperature_Max))
 320:	f8 01       	movw	r30, r16
 322:	c0 80       	ld	r12, Z
 324:	d1 80       	ldd	r13, Z+1	; 0x01
 326:	e2 80       	ldd	r14, Z+2	; 0x02
 328:	f3 80       	ldd	r15, Z+3	; 0x03
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	40 e2       	ldi	r20, 0x20	; 32
 330:	52 ec       	ldi	r21, 0xC2	; 194
 332:	c7 01       	movw	r24, r14
 334:	b6 01       	movw	r22, r12
 336:	0e 94 2c 02 	call	0x458	; 0x458 <__cmpsf2>
 33a:	88 23       	and	r24, r24
 33c:	54 f0       	brlt	.+20     	; 0x352 <DHT_Read+0xee>
 33e:	20 e0       	ldi	r18, 0x00	; 0
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	40 ea       	ldi	r20, 0xA0	; 160
 344:	52 e4       	ldi	r21, 0x42	; 66
 346:	c7 01       	movw	r24, r14
 348:	b6 01       	movw	r22, r12
 34a:	0e 94 55 03 	call	0x6aa	; 0x6aa <__gesf2>
 34e:	18 16       	cp	r1, r24
 350:	24 f4       	brge	.+8      	; 0x35a <DHT_Read+0xf6>
		__DHT_STATUS = DHT_Error_Temperature;
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 358:	16 c0       	rjmp	.+44     	; 0x386 <DHT_Read+0x122>
		else if ((*Humidity < __DHT_Humidity_Min) || (*Humidity > __DHT_Humidity_Max))
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	a9 01       	movw	r20, r18
 360:	c5 01       	movw	r24, r10
 362:	b4 01       	movw	r22, r8
 364:	0e 94 2c 02 	call	0x458	; 0x458 <__cmpsf2>
 368:	88 23       	and	r24, r24
 36a:	54 f0       	brlt	.+20     	; 0x380 <DHT_Read+0x11c>
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	48 ec       	ldi	r20, 0xC8	; 200
 372:	52 e4       	ldi	r21, 0x42	; 66
 374:	c5 01       	movw	r24, r10
 376:	b4 01       	movw	r22, r8
 378:	0e 94 55 03 	call	0x6aa	; 0x6aa <__gesf2>
 37c:	18 16       	cp	r1, r24
 37e:	1c f4       	brge	.+6      	; 0x386 <DHT_Read+0x122>
		__DHT_STATUS = DHT_Error_Humidity;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
}
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	df 91       	pop	r29
 390:	cf 91       	pop	r28
 392:	1f 91       	pop	r17
 394:	0f 91       	pop	r16
 396:	ff 90       	pop	r15
 398:	ef 90       	pop	r14
 39a:	df 90       	pop	r13
 39c:	cf 90       	pop	r12
 39e:	bf 90       	pop	r11
 3a0:	af 90       	pop	r10
 3a2:	9f 90       	pop	r9
 3a4:	8f 90       	pop	r8
 3a6:	08 95       	ret

000003a8 <Init>:
	DHT_Setup();
	
}

void error_checks()
{
 3a8:	53 9a       	sbi	0x0a, 3	; 10
 3aa:	55 9a       	sbi	0x0a, 5	; 10
 3ac:	56 9a       	sbi	0x0a, 6	; 10
 3ae:	56 9a       	sbi	0x0a, 6	; 10
 3b0:	50 9a       	sbi	0x0a, 0	; 10
 3b2:	38 9a       	sbi	0x07, 0	; 7
 3b4:	39 98       	cbi	0x07, 1	; 7
 3b6:	3c 9a       	sbi	0x07, 4	; 7
 3b8:	0e 94 6e 00 	call	0xdc	; 0xdc <DHT_Setup>
 3bc:	08 95       	ret

000003be <main>:
	
}

int main(void)
{
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	28 97       	sbiw	r28, 0x08	; 8
 3c8:	0f b6       	in	r0, 0x3f	; 63
 3ca:	f8 94       	cli
 3cc:	de bf       	out	0x3e, r29	; 62
 3ce:	0f be       	out	0x3f, r0	; 63
 3d0:	cd bf       	out	0x3d, r28	; 61
	
	double temp[1], hum[1];
	temp[0] = hum[0] = 0;
 3d2:	1d 82       	std	Y+5, r1	; 0x05
 3d4:	1e 82       	std	Y+6, r1	; 0x06
 3d6:	1f 82       	std	Y+7, r1	; 0x07
 3d8:	18 86       	std	Y+8, r1	; 0x08
 3da:	19 82       	std	Y+1, r1	; 0x01
 3dc:	1a 82       	std	Y+2, r1	; 0x02
 3de:	1b 82       	std	Y+3, r1	; 0x03
 3e0:	1c 82       	std	Y+4, r1	; 0x04
	Init();
 3e2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <Init>
	
    while (1) 
    {
		
		float vh_val = DigitalRead(VH400);
 3e6:	31 99       	sbic	0x06, 1	; 6
 3e8:	2e c0       	rjmp	.+92     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 3ea:	24 c0       	rjmp	.+72     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			DigitalWrite(LED, Low);
			//DigitalWrite(Drive, Low);
		}
		
			
		if(temp[0] > 80)
 3ec:	c9 80       	ldd	r12, Y+1	; 0x01
 3ee:	da 80       	ldd	r13, Y+2	; 0x02
 3f0:	eb 80       	ldd	r14, Y+3	; 0x03
 3f2:	fc 80       	ldd	r15, Y+4	; 0x04
 3f4:	20 e0       	ldi	r18, 0x00	; 0
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	40 ea       	ldi	r20, 0xA0	; 160
 3fa:	52 e4       	ldi	r21, 0x42	; 66
 3fc:	c7 01       	movw	r24, r14
 3fe:	b6 01       	movw	r22, r12
 400:	0e 94 55 03 	call	0x6aa	; 0x6aa <__gesf2>
 404:	18 16       	cp	r1, r24
 406:	24 f4       	brge	.+8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		{
			DigitalWrite(RED, High);
 408:	5b 9a       	sbi	0x0b, 3	; 11
			DigitalWrite(GREEN, Low);
 40a:	5d 98       	cbi	0x0b, 5	; 11
			DigitalWrite(BLUE, Low);
 40c:	5e 98       	cbi	0x0b, 6	; 11
 40e:	eb cf       	rjmp	.-42     	; 0x3e6 <main+0x28>
		}
		else if(temp[0] < 50)
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	48 e4       	ldi	r20, 0x48	; 72
 416:	52 e4       	ldi	r21, 0x42	; 66
 418:	c7 01       	movw	r24, r14
 41a:	b6 01       	movw	r22, r12
 41c:	0e 94 2c 02 	call	0x458	; 0x458 <__cmpsf2>
 420:	88 23       	and	r24, r24
 422:	24 f4       	brge	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			DigitalWrite(BLUE, High);
 424:	5e 9a       	sbi	0x0b, 6	; 11
			DigitalWrite(GREEN, Low);
 426:	5d 98       	cbi	0x0b, 5	; 11
			DigitalWrite(RED, Low);
 428:	5b 98       	cbi	0x0b, 3	; 11
 42a:	dd cf       	rjmp	.-70     	; 0x3e6 <main+0x28>
		}
		else
		{
			DigitalWrite(GREEN, High);
 42c:	5d 9a       	sbi	0x0b, 5	; 11
			DigitalWrite(RED, Low);
 42e:	5b 98       	cbi	0x0b, 3	; 11
			DigitalWrite(BLUE, Low);
 430:	5e 98       	cbi	0x0b, 6	; 11
 432:	d9 cf       	rjmp	.-78     	; 0x3e6 <main+0x28>
	
    while (1) 
    {
		
		float vh_val = DigitalRead(VH400);
		DHT_Read(temp, hum);
 434:	be 01       	movw	r22, r28
 436:	6b 5f       	subi	r22, 0xFB	; 251
 438:	7f 4f       	sbci	r23, 0xFF	; 255
 43a:	ce 01       	movw	r24, r28
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	0e 94 32 01 	call	0x264	; 0x264 <DHT_Read>
			DigitalWrite(LED, High);
			//DigitalWrite(Drive, High);
		}
		else
		{
			DigitalWrite(LED, Low);
 442:	44 98       	cbi	0x08, 4	; 8
 444:	d3 cf       	rjmp	.-90     	; 0x3ec <main+0x2e>
	
    while (1) 
    {
		
		float vh_val = DigitalRead(VH400);
		DHT_Read(temp, hum);
 446:	be 01       	movw	r22, r28
 448:	6b 5f       	subi	r22, 0xFB	; 251
 44a:	7f 4f       	sbci	r23, 0xFF	; 255
 44c:	ce 01       	movw	r24, r28
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	0e 94 32 01 	call	0x264	; 0x264 <DHT_Read>
		
		if(vh_val > 0)
		{
			DigitalWrite(LED, High);
 454:	44 9a       	sbi	0x08, 4	; 8
 456:	ca cf       	rjmp	.-108    	; 0x3ec <main+0x2e>

00000458 <__cmpsf2>:
 458:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_cmp>
 45c:	08 f4       	brcc	.+2      	; 0x460 <__cmpsf2+0x8>
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	08 95       	ret

00000462 <__divsf3>:
 462:	0e 94 45 02 	call	0x48a	; 0x48a <__divsf3x>
 466:	0c 94 1b 03 	jmp	0x636	; 0x636 <__fp_round>
 46a:	0e 94 14 03 	call	0x628	; 0x628 <__fp_pscB>
 46e:	58 f0       	brcs	.+22     	; 0x486 <__divsf3+0x24>
 470:	0e 94 0d 03 	call	0x61a	; 0x61a <__fp_pscA>
 474:	40 f0       	brcs	.+16     	; 0x486 <__divsf3+0x24>
 476:	29 f4       	brne	.+10     	; 0x482 <__divsf3+0x20>
 478:	5f 3f       	cpi	r21, 0xFF	; 255
 47a:	29 f0       	breq	.+10     	; 0x486 <__divsf3+0x24>
 47c:	0c 94 04 03 	jmp	0x608	; 0x608 <__fp_inf>
 480:	51 11       	cpse	r21, r1
 482:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_szero>
 486:	0c 94 0a 03 	jmp	0x614	; 0x614 <__fp_nan>

0000048a <__divsf3x>:
 48a:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_split3>
 48e:	68 f3       	brcs	.-38     	; 0x46a <__divsf3+0x8>

00000490 <__divsf3_pse>:
 490:	99 23       	and	r25, r25
 492:	b1 f3       	breq	.-20     	; 0x480 <__divsf3+0x1e>
 494:	55 23       	and	r21, r21
 496:	91 f3       	breq	.-28     	; 0x47c <__divsf3+0x1a>
 498:	95 1b       	sub	r25, r21
 49a:	55 0b       	sbc	r21, r21
 49c:	bb 27       	eor	r27, r27
 49e:	aa 27       	eor	r26, r26
 4a0:	62 17       	cp	r22, r18
 4a2:	73 07       	cpc	r23, r19
 4a4:	84 07       	cpc	r24, r20
 4a6:	38 f0       	brcs	.+14     	; 0x4b6 <__divsf3_pse+0x26>
 4a8:	9f 5f       	subi	r25, 0xFF	; 255
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	44 1f       	adc	r20, r20
 4b2:	aa 1f       	adc	r26, r26
 4b4:	a9 f3       	breq	.-22     	; 0x4a0 <__divsf3_pse+0x10>
 4b6:	35 d0       	rcall	.+106    	; 0x522 <__divsf3_pse+0x92>
 4b8:	0e 2e       	mov	r0, r30
 4ba:	3a f0       	brmi	.+14     	; 0x4ca <__divsf3_pse+0x3a>
 4bc:	e0 e8       	ldi	r30, 0x80	; 128
 4be:	32 d0       	rcall	.+100    	; 0x524 <__divsf3_pse+0x94>
 4c0:	91 50       	subi	r25, 0x01	; 1
 4c2:	50 40       	sbci	r21, 0x00	; 0
 4c4:	e6 95       	lsr	r30
 4c6:	00 1c       	adc	r0, r0
 4c8:	ca f7       	brpl	.-14     	; 0x4bc <__divsf3_pse+0x2c>
 4ca:	2b d0       	rcall	.+86     	; 0x522 <__divsf3_pse+0x92>
 4cc:	fe 2f       	mov	r31, r30
 4ce:	29 d0       	rcall	.+82     	; 0x522 <__divsf3_pse+0x92>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	bb 1f       	adc	r27, r27
 4d8:	26 17       	cp	r18, r22
 4da:	37 07       	cpc	r19, r23
 4dc:	48 07       	cpc	r20, r24
 4de:	ab 07       	cpc	r26, r27
 4e0:	b0 e8       	ldi	r27, 0x80	; 128
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__divsf3_pse+0x56>
 4e4:	bb 0b       	sbc	r27, r27
 4e6:	80 2d       	mov	r24, r0
 4e8:	bf 01       	movw	r22, r30
 4ea:	ff 27       	eor	r31, r31
 4ec:	93 58       	subi	r25, 0x83	; 131
 4ee:	5f 4f       	sbci	r21, 0xFF	; 255
 4f0:	3a f0       	brmi	.+14     	; 0x500 <__divsf3_pse+0x70>
 4f2:	9e 3f       	cpi	r25, 0xFE	; 254
 4f4:	51 05       	cpc	r21, r1
 4f6:	78 f0       	brcs	.+30     	; 0x516 <__divsf3_pse+0x86>
 4f8:	0c 94 04 03 	jmp	0x608	; 0x608 <__fp_inf>
 4fc:	0c 94 4f 03 	jmp	0x69e	; 0x69e <__fp_szero>
 500:	5f 3f       	cpi	r21, 0xFF	; 255
 502:	e4 f3       	brlt	.-8      	; 0x4fc <__divsf3_pse+0x6c>
 504:	98 3e       	cpi	r25, 0xE8	; 232
 506:	d4 f3       	brlt	.-12     	; 0x4fc <__divsf3_pse+0x6c>
 508:	86 95       	lsr	r24
 50a:	77 95       	ror	r23
 50c:	67 95       	ror	r22
 50e:	b7 95       	ror	r27
 510:	f7 95       	ror	r31
 512:	9f 5f       	subi	r25, 0xFF	; 255
 514:	c9 f7       	brne	.-14     	; 0x508 <__divsf3_pse+0x78>
 516:	88 0f       	add	r24, r24
 518:	91 1d       	adc	r25, r1
 51a:	96 95       	lsr	r25
 51c:	87 95       	ror	r24
 51e:	97 f9       	bld	r25, 7
 520:	08 95       	ret
 522:	e1 e0       	ldi	r30, 0x01	; 1
 524:	66 0f       	add	r22, r22
 526:	77 1f       	adc	r23, r23
 528:	88 1f       	adc	r24, r24
 52a:	bb 1f       	adc	r27, r27
 52c:	62 17       	cp	r22, r18
 52e:	73 07       	cpc	r23, r19
 530:	84 07       	cpc	r24, r20
 532:	ba 07       	cpc	r27, r26
 534:	20 f0       	brcs	.+8      	; 0x53e <__divsf3_pse+0xae>
 536:	62 1b       	sub	r22, r18
 538:	73 0b       	sbc	r23, r19
 53a:	84 0b       	sbc	r24, r20
 53c:	ba 0b       	sbc	r27, r26
 53e:	ee 1f       	adc	r30, r30
 540:	88 f7       	brcc	.-30     	; 0x524 <__divsf3_pse+0x94>
 542:	e0 95       	com	r30
 544:	08 95       	ret

00000546 <__floatunsisf>:
 546:	e8 94       	clt
 548:	09 c0       	rjmp	.+18     	; 0x55c <__floatsisf+0x12>

0000054a <__floatsisf>:
 54a:	97 fb       	bst	r25, 7
 54c:	3e f4       	brtc	.+14     	; 0x55c <__floatsisf+0x12>
 54e:	90 95       	com	r25
 550:	80 95       	com	r24
 552:	70 95       	com	r23
 554:	61 95       	neg	r22
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	99 23       	and	r25, r25
 55e:	a9 f0       	breq	.+42     	; 0x58a <__floatsisf+0x40>
 560:	f9 2f       	mov	r31, r25
 562:	96 e9       	ldi	r25, 0x96	; 150
 564:	bb 27       	eor	r27, r27
 566:	93 95       	inc	r25
 568:	f6 95       	lsr	r31
 56a:	87 95       	ror	r24
 56c:	77 95       	ror	r23
 56e:	67 95       	ror	r22
 570:	b7 95       	ror	r27
 572:	f1 11       	cpse	r31, r1
 574:	f8 cf       	rjmp	.-16     	; 0x566 <__floatsisf+0x1c>
 576:	fa f4       	brpl	.+62     	; 0x5b6 <__floatsisf+0x6c>
 578:	bb 0f       	add	r27, r27
 57a:	11 f4       	brne	.+4      	; 0x580 <__floatsisf+0x36>
 57c:	60 ff       	sbrs	r22, 0
 57e:	1b c0       	rjmp	.+54     	; 0x5b6 <__floatsisf+0x6c>
 580:	6f 5f       	subi	r22, 0xFF	; 255
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	16 c0       	rjmp	.+44     	; 0x5b6 <__floatsisf+0x6c>
 58a:	88 23       	and	r24, r24
 58c:	11 f0       	breq	.+4      	; 0x592 <__floatsisf+0x48>
 58e:	96 e9       	ldi	r25, 0x96	; 150
 590:	11 c0       	rjmp	.+34     	; 0x5b4 <__floatsisf+0x6a>
 592:	77 23       	and	r23, r23
 594:	21 f0       	breq	.+8      	; 0x59e <__floatsisf+0x54>
 596:	9e e8       	ldi	r25, 0x8E	; 142
 598:	87 2f       	mov	r24, r23
 59a:	76 2f       	mov	r23, r22
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <__floatsisf+0x5e>
 59e:	66 23       	and	r22, r22
 5a0:	71 f0       	breq	.+28     	; 0x5be <__floatsisf+0x74>
 5a2:	96 e8       	ldi	r25, 0x86	; 134
 5a4:	86 2f       	mov	r24, r22
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	2a f0       	brmi	.+10     	; 0x5b6 <__floatsisf+0x6c>
 5ac:	9a 95       	dec	r25
 5ae:	66 0f       	add	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	da f7       	brpl	.-10     	; 0x5ac <__floatsisf+0x62>
 5b6:	88 0f       	add	r24, r24
 5b8:	96 95       	lsr	r25
 5ba:	87 95       	ror	r24
 5bc:	97 f9       	bld	r25, 7
 5be:	08 95       	ret

000005c0 <__fp_cmp>:
 5c0:	99 0f       	add	r25, r25
 5c2:	00 08       	sbc	r0, r0
 5c4:	55 0f       	add	r21, r21
 5c6:	aa 0b       	sbc	r26, r26
 5c8:	e0 e8       	ldi	r30, 0x80	; 128
 5ca:	fe ef       	ldi	r31, 0xFE	; 254
 5cc:	16 16       	cp	r1, r22
 5ce:	17 06       	cpc	r1, r23
 5d0:	e8 07       	cpc	r30, r24
 5d2:	f9 07       	cpc	r31, r25
 5d4:	c0 f0       	brcs	.+48     	; 0x606 <__fp_cmp+0x46>
 5d6:	12 16       	cp	r1, r18
 5d8:	13 06       	cpc	r1, r19
 5da:	e4 07       	cpc	r30, r20
 5dc:	f5 07       	cpc	r31, r21
 5de:	98 f0       	brcs	.+38     	; 0x606 <__fp_cmp+0x46>
 5e0:	62 1b       	sub	r22, r18
 5e2:	73 0b       	sbc	r23, r19
 5e4:	84 0b       	sbc	r24, r20
 5e6:	95 0b       	sbc	r25, r21
 5e8:	39 f4       	brne	.+14     	; 0x5f8 <__fp_cmp+0x38>
 5ea:	0a 26       	eor	r0, r26
 5ec:	61 f0       	breq	.+24     	; 0x606 <__fp_cmp+0x46>
 5ee:	23 2b       	or	r18, r19
 5f0:	24 2b       	or	r18, r20
 5f2:	25 2b       	or	r18, r21
 5f4:	21 f4       	brne	.+8      	; 0x5fe <__fp_cmp+0x3e>
 5f6:	08 95       	ret
 5f8:	0a 26       	eor	r0, r26
 5fa:	09 f4       	brne	.+2      	; 0x5fe <__fp_cmp+0x3e>
 5fc:	a1 40       	sbci	r26, 0x01	; 1
 5fe:	a6 95       	lsr	r26
 600:	8f ef       	ldi	r24, 0xFF	; 255
 602:	81 1d       	adc	r24, r1
 604:	81 1d       	adc	r24, r1
 606:	08 95       	ret

00000608 <__fp_inf>:
 608:	97 f9       	bld	r25, 7
 60a:	9f 67       	ori	r25, 0x7F	; 127
 60c:	80 e8       	ldi	r24, 0x80	; 128
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	60 e0       	ldi	r22, 0x00	; 0
 612:	08 95       	ret

00000614 <__fp_nan>:
 614:	9f ef       	ldi	r25, 0xFF	; 255
 616:	80 ec       	ldi	r24, 0xC0	; 192
 618:	08 95       	ret

0000061a <__fp_pscA>:
 61a:	00 24       	eor	r0, r0
 61c:	0a 94       	dec	r0
 61e:	16 16       	cp	r1, r22
 620:	17 06       	cpc	r1, r23
 622:	18 06       	cpc	r1, r24
 624:	09 06       	cpc	r0, r25
 626:	08 95       	ret

00000628 <__fp_pscB>:
 628:	00 24       	eor	r0, r0
 62a:	0a 94       	dec	r0
 62c:	12 16       	cp	r1, r18
 62e:	13 06       	cpc	r1, r19
 630:	14 06       	cpc	r1, r20
 632:	05 06       	cpc	r0, r21
 634:	08 95       	ret

00000636 <__fp_round>:
 636:	09 2e       	mov	r0, r25
 638:	03 94       	inc	r0
 63a:	00 0c       	add	r0, r0
 63c:	11 f4       	brne	.+4      	; 0x642 <__fp_round+0xc>
 63e:	88 23       	and	r24, r24
 640:	52 f0       	brmi	.+20     	; 0x656 <__fp_round+0x20>
 642:	bb 0f       	add	r27, r27
 644:	40 f4       	brcc	.+16     	; 0x656 <__fp_round+0x20>
 646:	bf 2b       	or	r27, r31
 648:	11 f4       	brne	.+4      	; 0x64e <__fp_round+0x18>
 64a:	60 ff       	sbrs	r22, 0
 64c:	04 c0       	rjmp	.+8      	; 0x656 <__fp_round+0x20>
 64e:	6f 5f       	subi	r22, 0xFF	; 255
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	8f 4f       	sbci	r24, 0xFF	; 255
 654:	9f 4f       	sbci	r25, 0xFF	; 255
 656:	08 95       	ret

00000658 <__fp_split3>:
 658:	57 fd       	sbrc	r21, 7
 65a:	90 58       	subi	r25, 0x80	; 128
 65c:	44 0f       	add	r20, r20
 65e:	55 1f       	adc	r21, r21
 660:	59 f0       	breq	.+22     	; 0x678 <__fp_splitA+0x10>
 662:	5f 3f       	cpi	r21, 0xFF	; 255
 664:	71 f0       	breq	.+28     	; 0x682 <__fp_splitA+0x1a>
 666:	47 95       	ror	r20

00000668 <__fp_splitA>:
 668:	88 0f       	add	r24, r24
 66a:	97 fb       	bst	r25, 7
 66c:	99 1f       	adc	r25, r25
 66e:	61 f0       	breq	.+24     	; 0x688 <__fp_splitA+0x20>
 670:	9f 3f       	cpi	r25, 0xFF	; 255
 672:	79 f0       	breq	.+30     	; 0x692 <__fp_splitA+0x2a>
 674:	87 95       	ror	r24
 676:	08 95       	ret
 678:	12 16       	cp	r1, r18
 67a:	13 06       	cpc	r1, r19
 67c:	14 06       	cpc	r1, r20
 67e:	55 1f       	adc	r21, r21
 680:	f2 cf       	rjmp	.-28     	; 0x666 <__fp_split3+0xe>
 682:	46 95       	lsr	r20
 684:	f1 df       	rcall	.-30     	; 0x668 <__fp_splitA>
 686:	08 c0       	rjmp	.+16     	; 0x698 <__fp_splitA+0x30>
 688:	16 16       	cp	r1, r22
 68a:	17 06       	cpc	r1, r23
 68c:	18 06       	cpc	r1, r24
 68e:	99 1f       	adc	r25, r25
 690:	f1 cf       	rjmp	.-30     	; 0x674 <__fp_splitA+0xc>
 692:	86 95       	lsr	r24
 694:	71 05       	cpc	r23, r1
 696:	61 05       	cpc	r22, r1
 698:	08 94       	sec
 69a:	08 95       	ret

0000069c <__fp_zero>:
 69c:	e8 94       	clt

0000069e <__fp_szero>:
 69e:	bb 27       	eor	r27, r27
 6a0:	66 27       	eor	r22, r22
 6a2:	77 27       	eor	r23, r23
 6a4:	cb 01       	movw	r24, r22
 6a6:	97 f9       	bld	r25, 7
 6a8:	08 95       	ret

000006aa <__gesf2>:
 6aa:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_cmp>
 6ae:	08 f4       	brcc	.+2      	; 0x6b2 <__gesf2+0x8>
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
